====================
Empty Statement
====================

{%%}
{% %}

---

(template
  (jinja_statement)
  (jinja_statement))

====================
For Statement
====================

<h1>Members</h1>
<ul>
{%- for user in users %}
  <li>{{ user.username|e }}</li>
{%- endfor %}
</ul>

---

(template
  (jinja_statement
    (for_statement
        left: (identifier)
        right: (identifier)))
  (jinja_expression
    (filter
      object: (attribute
          object: (identifier)
          attribute: (identifier))
      filter: (identifier)))
  (jinja_statement
    (end_statement)))

====================
For Statement w/ Filter
====================

<dl>
{% for key, value in my_dict | dictsort %}
    <dt>{{ key|e }}</dt>
    <dd>{{ value|e }}</dd>
{% endfor %}
</dl>

---

(template
  (jinja_statement
    (for_statement
      left: (pattern_list
        (identifier)
        (identifier))
      right: (filter
        object: (identifier)
        filter: (identifier))))
  (jinja_expression
    (filter
      object: (identifier)
      filter: (identifier)))
  (jinja_expression
    (filter
      object: (identifier)
      filter: (identifier)))
  (jinja_statement
    (end_statement)))

====================
For Statement w/ Sequence Filter
====================

{% for user in users if not user.hidden %}
    <li>{{ user.username | e }}</li>
{% endfor %}

---

(template
  (jinja_statement
    (for_statement
      left: (identifier)
      right: (identifier)
      (if_statement
        condition: (not_operator
          argument: (attribute
            object: (identifier)
            attribute: (identifier))))))
  (jinja_expression
    (filter
      object: (attribute
        object: (identifier)
        attribute: (identifier))
      filter: (identifier)))
  (jinja_statement
    (end_statement)))

====================
For Statement w/ Recursive
====================

<ul class="sitemap">
{%- for item in sitemap recursive %}
    <li><a href="{{ item.href|e }}">{{ item.title }}</a>
    {%- if item.children -%}
        <ul class="submenu">{{ loop(item.children) }}</ul>
    {%- endif %}</li>
{%- endfor %}
</ul>

---

(template
  (jinja_statement
    (for_statement
      left: (identifier)
      right: (identifier)))
  (jinja_expression
    (filter
      object: (attribute
        object: (identifier)
        attribute: (identifier))
      filter: (identifier)))
  (jinja_expression
    (attribute
      object: (identifier)
      attribute: (identifier)))
  (jinja_statement
    (if_statement
      condition: (attribute
        object: (identifier)
        attribute: (identifier))))
  (jinja_expression
    (call
      function: (identifier)
      arguments: (argument_list
        (attribute
          object: (identifier)
          attribute: (identifier)))))
  (jinja_statement
    (end_statement))
  (jinja_statement
    (end_statement)))

====================
If Statement
====================

{% if users %}
<ul>
{% for user in users %}
    <li>{{ user.username|e }}</li>
{% endfor %}
</ul>
{% endif %}

---

(template
  (jinja_statement
    (if_statement
      condition: (identifier)))
  (jinja_statement
    (for_statement
      left: (identifier)
      right: (identifier)))
  (jinja_expression
    (filter
      object: (attribute
        object: (identifier)
        attribute: (identifier))
      filter: (identifier)))
  (jinja_statement
    (end_statement))
  (jinja_statement
    (end_statement)))

====================
If/Else Statement
====================

{% if kenny.sick %}
    Kenny is sick.
{% elif kenny.dead %}
    You killed Kenny!  You bastard!!!
{% else %}
    Kenny looks okay --- so far
{% endif %}

---

(template
  (jinja_statement
    (if_statement
      condition: (attribute
        object: (identifier)
        attribute: (identifier))))
  (jinja_statement
    (elif_statement
      condition: (attribute
        object: (identifier)
        attribute: (identifier))))
  (jinja_statement
    (else_statement))
  (jinja_statement
    (end_statement)))

====================
Macro Statement
====================

{% macro input(name, value='', type='text', size=20) -%}
    <input type="{{ type }}" name="{{ name }}" value="{{
        value|e }}" size="{{ size }}">
{%- endmacro %}

<p>{{ input('username') }}</p>
<p>{{ input('password', type='password') }}</p>

---

(template
  (jinja_statement
    (macro_statement
      name: (identifier)
      parameters: (parameters
        (identifier)
        (default_parameter
          name: (identifier)
          value: (string
            (string_start)
            (string_end)))
        (default_parameter
          name: (identifier)
          value: (string
            (string_start)
            (string_content)
            (string_end)))
        (default_parameter
          name: (identifier)
          value: (integer)))))
  (jinja_expression
    (identifier))
  (jinja_expression
    (identifier))
  (jinja_expression
    (filter
      object: (identifier)
      filter: (identifier)))
  (jinja_expression
    (identifier))
  (jinja_statement
    (end_statement))
  (jinja_expression
    (call
      function: (identifier)
      arguments: (argument_list
        (string
          (string_start)
          (string_content)
          (string_end)))))
  (jinja_expression
    (call
      function: (identifier)
      arguments: (argument_list
        (string
          (string_start)
          (string_content)
          (string_end))
        (keyword_argument
          name: (identifier)
          value: (string
            (string_start)
            (string_content)
            (string_end)))))))

====================
Call Statement
====================

{% call(user) dump_users(list_of_user) %}
    <dl>
        <dt>Realname</dt>
        <dd>{{ user.realname|e }}</dd>
        <dt>Description</dt>
        <dd>{{ user.description }}</dd>
    </dl>
{% endcall %}

---

(template
  (jinja_statement
    (call_statement
      parameters: (parameters
        (identifier))
      callable: (call
        function: (identifier)
        arguments: (argument_list
          (identifier)))))
  (jinja_expression
    (filter
      object: (attribute
        object: (identifier)
        attribute: (identifier))
      filter: (identifier)))
  (jinja_expression
    (attribute
      object: (identifier)
      attribute: (identifier)))
  (jinja_statement
    (end_statement)))

====================
Filter Statement
====================

{% filter upper %}
    This text becomes uppercase
{% endfilter %}

{% filter center(100) %}Center this{% endfilter %}

---

(template
  (jinja_statement
    (filter_statement
      filter: (identifier)))
  (jinja_statement
    (end_statement))
  (jinja_statement
    (filter_statement
      filter: (call
        function: (identifier)
        arguments: (argument_list
          (integer)))))
  (jinja_statement
    (end_statement)))

====================
Assignment Statement
====================

{% set navigation = [('index.html', 'Index'), ('about.html', 'About')] %}
{% set key, value = call_something() %}

---

(template
  (jinja_statement
    (set_statement
      assignment: (assignment
        left: (identifier)
        right: (list
          (tuple
            (string
              (string_start)
              (string_content)
              (string_end))
            (string
              (string_start)
              (string_content)
              (string_end)))
          (tuple
            (string
              (string_start)
              (string_content)
              (string_end))
            (string
              (string_start)
              (string_content)
              (string_end)))))))
  (jinja_statement
    (set_statement
      assignment: (assignment
        left: (pattern_list
          (identifier)
          (identifier))
        right: (call
          function: (identifier)
          arguments: (argument_list))))))

====================
Assignment Statement
====================

{% set navigation %}
    <li><a href="/">Index</a>
    <li><a href="/downloads">Downloads</a>
{% endset %}

{% set reply | wordwrap %}
    You wrote:
    {{ message }}
{% endset %}

---

(template
  (jinja_statement
    (set_statement
      assignment: (identifier)))
  (jinja_statement
    (end_statement))
  (jinja_statement
    (set_statement
      assignment: (filter
        object: (identifier)
        filter: (identifier))))
  (jinja_expression
    (identifier))
  (jinja_statement
    (end_statement)))

====================
Block Assignment Statement
====================

{% extends "base.html" %}
{% block title %}Index{% endblock %}
{% block head %}
    {{ super() }}
    <style type="text/css">
        .important { color: #336699; }
    </style>
{% endblock %}
{% block content %}
    <h1>Index</h1>
    <p class="important">
      Welcome to my awesome homepage.
    </p>
{% endblock %}

---

(template
  (jinja_statement
    (extends_statement
      (string
        (string_start)
        (string_content)
        (string_end))))
  (jinja_statement
    (block_statement
      name: (identifier)))
  (jinja_statement
    (end_statement))
  (jinja_statement
    (block_statement
      name: (identifier)))
  (jinja_expression
    (call
      function: (identifier)
      arguments: (argument_list)))
  (jinja_statement
    (end_statement))
  (jinja_statement
    (block_statement
      name: (identifier)))
  (jinja_statement
    (end_statement)))

====================
Include Statement
====================

{% include "sidebar.html" %}
{% include "sidebar.html" without context %}
{% include "sidebar.html" ignore missing %}
{% include "sidebar.html" ignore missing with context %}
{% include "sidebar.html" ignore missing without context %}

---

(template
  (jinja_statement
    (include_statement
      (string
        (string_start)
        (string_content)
        (string_end))))
  (jinja_statement
    (include_statement
      (string
        (string_start)
        (string_content)
        (string_end))))
  (jinja_statement
    (include_statement
      (string
        (string_start)
        (string_content)
        (string_end))))
  (jinja_statement
    (include_statement
      (string
        (string_start)
        (string_content)
        (string_end))))
  (jinja_statement
    (include_statement
      (string
        (string_start)
        (string_content)
        (string_end)))))


====================
Import Statement
====================

{% import 'forms.html' as forms %}
{% from 'forms.html' import input as input_field, textarea %}

---

(template
  (jinja_statement
    (import_statement
      name: (aliased_import
        name: (string
          (string_start)
          (string_content)
          (string_end))
        alias: (identifier))))
  (jinja_statement
    (import_from_statement
      module_name: (string
        (string_start)
        (string_content)
        (string_end))
      name: (aliased_import
        name: (identifier)
        alias: (identifier))
      name: (identifier))))
