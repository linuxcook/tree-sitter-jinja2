====================
Empty Expression
====================

{{}}
---

(template
  (jinja_expression))

====================
String Expression
====================

{{ "" }}
{{ "Hello World" }}
{{ 'Hello World' }}
{{ "Escape \n\r\\\"\'\t\b\f'" }}
{{ f"This is not allowed{'!'}" }}
{{ r"This is not allowed!" }}
{{ b"This is not allowed!" }}

---

(template
  (jinja_expression
    (string
      (string_start)
      (string_end)))
  (jinja_expression
    (string
      (string_start)
      (string_content)
      (string_end)))
  (jinja_expression
    (string
      (string_start)
      (string_content)
      (string_end)))
  (jinja_expression
    (string
      (string_start)
      (string_content
        (escape_sequence)
        (escape_sequence)
        (escape_sequence)
        (escape_sequence)
        (escape_sequence)
        (escape_sequence)
        (escape_sequence)
        (escape_sequence))
      (string_end)))
  (jinja_expression
    (ERROR (identifier))
    (string
      (string_start)
      (string_content)
      (string_end)))
  (jinja_expression
    (ERROR (identifier))
    (string
      (string_start)
      (string_content)
      (string_end)))
  (jinja_expression
    (ERROR (identifier))
    (string
      (string_start)
      (string_content)
      (string_end))))

====================
Integer Expression
====================

{{ 42 }}
{{ -123 }}
{{ 12_323 }}

---

(template
  (jinja_expression
    (integer))
  (jinja_expression
    (unary_operator
      argument: (integer)))
  (jinja_expression
    (identifier)))

====================
Float Expression
====================

{{ 42.23 }}
{{ -42.23 }}

---

(template
  (jinja_expression
    (float))
  (jinja_expression
    (unary_operator
      argument: (float))))

====================
List Expression
====================

{{ [] }}
{{ [1, 2, 3, 4, 5] }}
{{ ['list', 'of', 'objects'] }}

---

(template
  (jinja_expression
    (list))
  (jinja_expression
    (list
      (integer)
      (integer)
      (integer)
      (integer)
      (integer)))
  (jinja_expression
    (list
      (string
        (string_start)
        (string_content)
        (string_end))
      (string
        (string_start)
        (string_content)
        (string_end))
      (string
        (string_start)
        (string_content)
        (string_end)))))

====================
Tuple Expression
====================

{{ () }}
{{ (1, 2, 3, 4, 5) }}
{{ ('tuple', 'of', 'values') }}

---

(template
  (jinja_expression
    (tuple))
  (jinja_expression
    (tuple
      (integer)
      (integer)
      (integer)
      (integer)
      (integer)))
  (jinja_expression
    (tuple
      (string
        (string_start)
        (string_content)
        (string_end))
      (string
        (string_start)
        (string_content)
        (string_end))
      (string
        (string_start)
        (string_content)
        (string_end)))))

====================
Dictionary Expression
====================

{{ {} }}
{{ {'dict': 'of'} }}
{{ {"dict": "of", "key": "and", "value": "pairs"} }}

---

(template
  (jinja_expression
    (dictionary))
  (jinja_expression
    (dictionary
      (pair
        key: (string
          (string_start)
          (string_content)
          (string_end))
        value: (string
          (string_start)
          (string_content)
          (string_end)))))
  (jinja_expression
    (dictionary
      (pair
        key: (string
          (string_start)
          (string_content)
          (string_end))
        value: (string
          (string_start)
          (string_content)
          (string_end)))
      (pair
        key: (string
          (string_start)
          (string_content)
          (string_end))
        value: (string
          (string_start)
          (string_content)
          (string_end)))
      (pair
        key: (string
          (string_start)
          (string_content)
          (string_end))
        value: (string
          (string_start)
          (string_content)
          (string_end))))))

====================
Boolean Expression
====================

{{ true }}
{{ false }}

---

(template
  (jinja_expression
    (true))
  (jinja_expression
    (false)))

====================
Tilde Expression
====================

{{ "Hello " ~ name ~ "!" }}

---

(template
  (jinja_expression
    (binary_operator
      left: (binary_operator
        left: (string
          (string_start)
          (string_content)
          (string_end))
        right: (identifier))
      right: (string
        (string_start)
        (string_content)
        (string_end)))))

====================
Conditional Expression
====================

{% extends layout_template if layout_template is defined else 'default.html' %}

---

(template
  (jinja_statement
    (extends_statement
      (conditional_expression
        (identifier)
        (comparison_operator
          (identifier)
          (identifier))
        (string
          (string_start)
          (string_content)
          (string_end))))))
